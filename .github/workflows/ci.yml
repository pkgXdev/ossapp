name: "test"
on: [pull_request]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      desktop: ${{steps.desktop.outputs.src}}
      preview_folder: ${{steps.preview.outputs.folder}}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: desktop
      with:
        filters: |
          src:
            - 'modules/desktop/**'
            - 'modules/ui/**'
    - name: get s3 preview folder
      id: preview
      run: echo "folder=${{ github.event.number }}-merge" >> $GITHUB_OUTPUT
  no_preview:
    needs: changes
    if: needs.changes.outputs.desktop == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: comment preview site
        uses: mshick/add-pr-comment@v2
        with:
          message-id: preview-comment-${{needs.changes.outputs.preview_folder}}
          message: |
            no preview or changes related to UI
  test:
    needs: changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: install app dependencies
        run: pnpm install
      # TODO: fix
      # - name: unit test
      #   run: pnpm --filter desktop run coverage
      - name: lint
        run: pnpm -r lint
  build_svelte:
    needs: changes
    if: needs.changes.outputs.svelte == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: cache gui linux
        uses: actions/cache@v3
        with:
          key: linux+x86-64-20-pnpm-cargo
          path: |
            ./pnpm
            ./target
      - name: build tauri for Linux
        uses: ./devops/linux-builder
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: sync web files into preview folder
        env:
          prefix: ${{ needs.changes.outputs.preview_folder }}
        run: |
          aws s3 sync ./modules/gui/build \
            "s3://preview.gui.tea.xyz/$prefix"
      - name: Install package
        run: sudo apt-get install -y jq coreutils
      - name: setup preview
        id: preview_setup
        run: .github/create-invalidate-preview.sh ${{ needs.changes.outputs.preview_folder }}

      - name: comment preview site
        uses: mshick/add-pr-comment@v2
        with:
          message-id: preview-comment-${{needs.changes.outputs.preview_folder}}
          message: |
            **preview is at**: 
            <a href="https://${{steps.preview_setup.outputs.domain}}" target="_blank">here</a>
            ```bash
            https://${{steps.preview_setup.outputs.domain}}
            ```
            copy-paste into a browser to view
  build_desktop:
    needs: changes
    if: needs.changes.outputs.desktop == 'true'
    strategy:
      matrix:
        platform:
          # X86+64 is built with ARM64 also
          - os: [self-hosted, macOS, ARM64]
            name: darwin+aarch64
    uses: ./.github/workflows/build-sign-notarize.yml
    with:
      platform: ${{ matrix.platform }}
      s3-prefix: ${{ needs.changes.outputs.preview_folder || 'dev-pr' }}
    secrets: inherit
  upload:
    needs: [build_desktop, changes]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          # x86 included already in aarch64
          - name: darwin+aarch64
            id: mac_m1
          # - name: linux+x86-64
          #   id: linux
          # - name: linux+aarch64
          #   id: linux_arm64
    steps:
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: s3 artifact download
      env:
        s3-installers-key: ${{ needs.build_desktop.outputs.s3-installers-artifact-key }}
      run: |
        aws s3 cp $s3-installers-key dist.tgz

    - run: mkdir dist
    - run: tar xzf dist.tgz -C dist

    - name: get installer filenames of arm64 and x86+64
      id: app_files
      working-directory: ./dist
      run: |
        ARM64_ZIP=$(ls | grep -Ev blockmap | grep arm64-mac.zip)
        X86_ZIP=$(ls | grep -Ev blockmap | grep -Ev arm64 | grep mac.zip)
        ARM64_DMG=$(ls | grep -Ev blockmap | grep arm64.dmg)
        X86_DMG=$(ls | grep -Ev blockmap | grep -Ev arm64 | grep dmg)
        echo zip_arm64=$ARM64_ZIP >> $GITHUB_OUTPUT
        echo zip_x86=$X86_ZIP >> $GITHUB_OUTPUT
        echo dmg_arm64=$ARM64_DMG >> $GITHUB_OUTPUT
        echo dmg_x86=$X86_DMG >> $GITHUB_OUTPUT

    - name: build platform output
      id: build_platform
      env:
        platform: ${{ matrix.platform.name }}
      run: |
        BUILD_PLATFORM=$(echo $platform | sed -e "s/darwin+//g" | sed -e "s/linux+//g")
        EXTENSION=dmg
        case $platform in
          "linux+x86-64")
            BUILD_PLATFORM="amd64"
            EXTENSION="deb"
            ;;
          "linux+aarch64")
            BUILD_PLATFORM="aarch64"
            EXTENSION="deb"
            ;;
          "darwin+aarch64")
            BUILD_PLATFORM="aarch64"
            EXTENSION="dmg"
            ;;
          "darwin+x86-64")
            BUILD_PLATFORM="x64"
            EXTENSION="dmg"
            ;;
          *)
            echo "Unknown platform $platform"
            exit 1
            ;;
        esac
        echo "build_platform=$BUILD_PLATFORM" >> $GITHUB_OUTPUT
        echo "extension=$EXTENSION" >> $GITHUB_OUTPUT

    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: cp package images from prod to preview bucket
      env:
        prefix: ${{ needs.changes.outputs.preview_folder }}
      run: |
        cd dist && \
        aws s3 sync . \
          "s3://preview.gui.tea.xyz/$prefix/"

    - name: comment install for Linux
      if: startsWith(matrix.platform.name, 'linux')
      uses: mshick/add-pr-comment@v2
      with:
        message-id: ${{ matrix.platform.id }}-comment
        message: |
          **installer for Linux ${{ matrix.platform.name }} is at**:
          ```bash
          http://preview.gui.tea.xyz.s3-website-us-east-1.amazonaws.com/${{ needs.changes.outputs.preview_folder }}/${{ steps.build_platform.outputs.filename }}
          ```
          copy-paste into a browser to download

    - name: comment install for MacOS
      if: startsWith(matrix.platform.name, 'darwin')
      uses: mshick/add-pr-comment@v2
      with:
        message-id: darwin+aarch64-comment
        message: |
          **installers for MacOS darwin+aarch64 is at**:
          ```bash
          http://preview.gui.tea.xyz.s3-website-us-east-1.amazonaws.com/${{ needs.changes.outputs.preview_folder }}/${{ steps.app_files.outputs.dmg_arm64 }}
          ```
          copy-paste into a browser to download
    - name: comment install for MacOS
      if: startsWith(matrix.platform.name, 'darwin')
      uses: mshick/add-pr-comment@v2
      with:
        message-id: darwin+x86-64-comment
        message: |
          **installers for MacOS darwin+x86-64 is at**:
          ```bash
          http://preview.gui.tea.xyz.s3-website-us-east-1.amazonaws.com/${{ needs.changes.outputs.preview_folder }}/${{ steps.app_files.outputs.dmg_x86 }}
          ```
          copy-paste into a browser to download